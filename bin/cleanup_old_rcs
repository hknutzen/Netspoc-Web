#!/bin/sh
# cleanup-history
# Remove revisions such that history back to $old remains accessible.
# We can't simply remove all revisions older than $old.
# We must retain older revisions if they have never been changed or
# have been changed just some days ago.
#
# Files under RCS/owner are cleaned up first.
# Find oldest POLICY file of any owner.
# Then clean up old toplevel files not referenced from files under RCS/owner.
#
# (C) 2020 by Heinz Knutzen     <heinz.knutzen@gmail.com>
#
# https://github.com/hknutzen/Netspoc-Web
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

usage () { echo "Usage: $0 <export_dir>"; }

# This must be understood by "date" command.
old='1 year ago'
export=$1
RCS=$export/RCS
current=$export/current

# Abort on any untested error.
set -e

abort () { [ "$1" ] && echo "Error: $1"; usage; exit 1; }

# Only print if connected to terminal.
debug () { if tty -s; then echo $1; fi }

[ -d "$RCS" ] || abort "Missing RCS directory '$RCS'"
[ -d "$current" ] || abort "Missing directory '$current'"

old_date=$(date -R -d "$old")

# Oldest POLICY file of all owners
oldest_epoch=$(date -d "$old" +'%s')
collect_oldest_epoch () {
    local epoch=$(date --date "$1" +'%s') || abort "Can't analyze $1"
    if [ $epoch -lt $oldest_epoch ] ; then
        oldest_epoch=$epoch
    fi
}

outdate () {
    local file="$1"
    local o_date="$2"
    local o1_rev o_rev

    # Show two newest revisions older than $p_date.
    # First revision will be retained.
    # Next older revision will be removed.
    line=$(rlog -d"$o_date>=" -zLT $file 2>/dev/null|
        head -20|grep '^revision'|head -2|cut -d' ' -f2|paste -s -d' ')
    read o1_rev o_rev <<EOF
$line
EOF

    # No next older revision found
    [ -z "$o_rev" ] && return

    # Remove from beginning of branch (oldest) up to and
    # including old revison
    debug "Removing up to $o_rev ($o_date) in $file"
    rcs -q -o:$o_rev $file
}

# First check owner/* directories.
for dir in $RCS/owner/* ; do
    p_file=$dir/POLICY,v

    # Check if owner has already been deleted.
    # History can be removed if it wasn't changed since $old.
    c_dir=$(echo $dir|sed -e "s|$RCS|$current|")
    if [ ! -d "$c_dir"  ] ; then

        # Find newest revision newer than $old_date
        p_rev=$(rlog -d"$old_date<" -zLT $p_file 2>/dev/null|
            head -14|tail -1|grep '^revision') || true
        if [ -z "$p_rev" ] ; then

            # Remove whole RCS directory
            debug "Deleting $dir"
	    rm -rf $dir
	    continue
        fi
    fi

    # Find newest revision of POLICY older than $old_date.
    p_rev=$(rlog -d"$old_date>=" -zLT $p_file 2>/dev/null|
        head -14|grep '^revision'|head -1|cut -d' ' -f2)

    # All revision are newer, leave unchanged.
    [ -z "$p_rev" ] && continue

    # Identify date of newest revision of POLICY older than $old_date.
    p_date=$(rlog -r$p_rev -zLT $p_file|grep '^date:'|cut -d' ' -f2-3|cut -d';' -f1)
    collect_oldest_epoch "$p_date"

    for file in $(find $dir/ -name '*,v') ; do
        outdate $file "$p_date"
    done
done

oldest_date=$(date -R -d @$oldest_epoch)
debug "Oldest owner POLICY: $oldest_date"

# Next check topelevel files.
for file in $RCS/* ; do
    [ -d "$file" ] && continue
    outdate $file "$oldest_date"
done
